// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Retail.Models;

namespace Retail.Migrations
{
    [DbContext(typeof(RetailContext))]
    [Migration("20181028214154_five")]
    partial class five
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-preview1-35029")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Retail.Models.DBModels.Category", b =>
                {
                    b.Property<int>("Cat_Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Cat_Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Retail.Models.DBModels.Gst", b =>
                {
                    b.Property<string>("GstId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Percent");

                    b.HasKey("GstId");

                    b.ToTable("Gst");
                });

            modelBuilder.Entity("Retail.Models.DBModels.LocalInventory", b =>
                {
                    b.Property<int>("LocalInventoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrentStock");

                    b.Property<int>("OutletId");

                    b.Property<int>("ProductId");

                    b.Property<int>("ReorderLevel");

                    b.Property<int>("SafetyLevel");

                    b.HasKey("LocalInventoryId");

                    b.HasIndex("OutletId");

                    b.HasIndex("ProductId");

                    b.ToTable("LocalInventory");
                });

            modelBuilder.Entity("Retail.Models.DBModels.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<DateTime?>("OrderDate");

                    b.Property<int>("StaffId");

                    b.Property<string>("Status");

                    b.HasKey("OrderId");

                    b.HasIndex("StaffId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Retail.Models.DBModels.OrderDetails", b =>
                {
                    b.Property<int>("DetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("DetailsId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Retail.Models.DBModels.Outlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Outlet");
                });

            modelBuilder.Entity("Retail.Models.DBModels.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cat_Id");

                    b.Property<string>("Company")
                        .IsRequired();

                    b.Property<string>("GstId");

                    b.Property<string>("Model");

                    b.Property<string>("ProductName");

                    b.Property<string>("Rate");

                    b.HasKey("ProductId");

                    b.HasIndex("Cat_Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Retail.Models.DBModels.Spec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProdId");

                    b.Property<string>("SpecName")
                        .IsRequired();

                    b.Property<string>("SpecValue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ProdId");

                    b.ToTable("Spec");
                });

            modelBuilder.Entity("Retail.Models.DBModels.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<DateTime?>("Age")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OutletId");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Retail.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password");

                    b.Property<string>("Role");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("Retail.Models.DBModels.LocalInventory", b =>
                {
                    b.HasOne("Retail.Models.DBModels.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Retail.Models.DBModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Retail.Models.DBModels.Order", b =>
                {
                    b.HasOne("Retail.Models.DBModels.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Retail.Models.DBModels.OrderDetails", b =>
                {
                    b.HasOne("Retail.Models.DBModels.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Retail.Models.DBModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Retail.Models.DBModels.Product", b =>
                {
                    b.HasOne("Retail.Models.DBModels.Category", "ProductCat")
                        .WithMany()
                        .HasForeignKey("Cat_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Retail.Models.DBModels.Spec", b =>
                {
                    b.HasOne("Retail.Models.DBModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProdId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
